package ${entityPackage}.controller;

import java.io.IOException;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import ${entityFullName};
import ${entityParent}.service.${entitySimpleName}Service;
import com.cheuks.bin.original.common.annotation.web.InterfaceDescription;

@Controller
@Scope("prototype")
@RequestMapping("/${entitySimpleName?uncap_first}/")
@InterfaceDescription(value = "", type = InterfaceDescription.TYPE_CLASS)
public class ${entitySimpleName}Controller extends AbstractController {

	@Autowired
	private ${entitySimpleName}Service ${entitySimpleName?uncap_first}Service;

	@RequestMapping(value = { "{path}" }, method = { RequestMethod.GET })
	@InterfaceDescription(value = "", type = InterfaceDescription.TYPE_METHOD, enable = true)
	public ModelAndView basePath(HttpServletRequest request, HttpServletResponse response, @PathVariable("path") String path) throws IOException {
		return new ModelAndView(path);
	}

	@RequestMapping(value = "get/{id}/to/{next}", method = { RequestMethod.GET, RequestMethod.POST })
	@InterfaceDescription(value = "", type = InterfaceDescription.TYPE_METHOD, enable = true)
	public ModelAndView getToNext(HttpServletRequest request, HttpServletResponse response, @PathVariable("id") ${idTypeNick} id, @PathVariable("next") String next) {
		${entitySimpleName} ${entitySimpleName?uncap_first};
		try {
			${entitySimpleName?uncap_first} = ${entitySimpleName?uncap_first}Service.getByPk(id);
			return new ModelAndView(next).addObject("${entitySimpleName?uncap_first}", ${entitySimpleName?uncap_first});
		} catch (Throwable e) {
			return exceptionPage(e);
		}
	}

	@RequestMapping(value = "get/{id}", method = { RequestMethod.GET, RequestMethod.POST })
	@InterfaceDescription(value = "", type = InterfaceDescription.TYPE_METHOD, enable = true)
	public ModelAndView get(HttpServletRequest request, HttpServletResponse response, @PathVariable("id") ${idTypeNick} id) {
		${entitySimpleName} ${entitySimpleName?uncap_first};
		try {
			${entitySimpleName?uncap_first} = ${entitySimpleName?uncap_first}Service.getByPk(id);
			return new ModelAndView("${entitySimpleName?uncap_first}").addObject("${entitySimpleName?uncap_first}", ${entitySimpleName?uncap_first});
		} catch (Throwable e) {
			return exceptionPage(e);
		}
	}

	@ResponseBody
	@RequestMapping(value = "get", method = { RequestMethod.GET })
	@InterfaceDescription(value = "", type = InterfaceDescription.TYPE_METHOD, enable = true)
	public Object get(HttpServletRequest request, HttpServletResponse response) {
		${entitySimpleName} ${entitySimpleName?uncap_first};
		try {
			${idTypeNick} id = Integer.valueOf(request.getParameter("id"));
			${entitySimpleName?uncap_first} = ${entitySimpleName?uncap_first}Service.getByPk(id);
			return new ModelAndView("${entitySimpleName?uncap_first}").addObject("${entitySimpleName?uncap_first}", ${entitySimpleName?uncap_first});
		} catch (Throwable e) {
			return fail(e);
		}
	}

	@RequestMapping(value = "put/{next}", method = { RequestMethod.POST })
	@InterfaceDescription(value = "", type = InterfaceDescription.TYPE_METHOD, enable = true)
	public ModelAndView put(HttpServletRequest request, HttpServletResponse response, @PathVariable("next") String next) {
		Map<String, Object> params = getParams(request);
		${entitySimpleName} ${entitySimpleName?uncap_first} = new ${entitySimpleName}();
		try {
			${entitySimpleName?uncap_first} = fillObject(${entitySimpleName?uncap_first}, params);
			${entitySimpleName?uncap_first}Service.update(${entitySimpleName?uncap_first});
			return new ModelAndView(next).addObject("${entitySimpleName?uncap_first}", ${entitySimpleName?uncap_first});
		} catch (Throwable e) {
			return exceptionPage(e);
		}
	}

	@ResponseBody
	@RequestMapping(value = "put", method = { RequestMethod.PUT })
	@InterfaceDescription(value = "", type = InterfaceDescription.TYPE_METHOD, enable = true)
	public Object put(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> params = getParams(request);
		${entitySimpleName} ${entitySimpleName?uncap_first} = new ${entitySimpleName}();
		try {
			${entitySimpleName?uncap_first} = fillObject(${entitySimpleName?uncap_first}, params);
			${entitySimpleName?uncap_first}Service.update(${entitySimpleName?uncap_first});
			return success();
		} catch (Throwable e) {
			return fail(e);
		}
	}

	@RequestMapping(value = "delete/{next}", method = { RequestMethod.POST })
	@InterfaceDescription(value = "", type = InterfaceDescription.TYPE_METHOD, enable = true)
	public ModelAndView delete(HttpServletRequest request, HttpServletResponse response, @PathVariable("next") String next) {
		try {
			${entitySimpleName} ${entitySimpleName?uncap_first} = new ${entitySimpleName}(Integer.valueOf(request.getParameter("id")));
			${entitySimpleName?uncap_first}Service.delete(${entitySimpleName?uncap_first});
			return new ModelAndView(next).addObject("${entitySimpleName?uncap_first}", ${entitySimpleName?uncap_first});
		} catch (Throwable e) {
			return exceptionPage(e);
		}
	}

	@ResponseBody
	@RequestMapping(value = "delete", method = { RequestMethod.DELETE })
	@InterfaceDescription(value = "", type = InterfaceDescription.TYPE_METHOD, enable = true)
	public Object delete(HttpServletRequest request, HttpServletResponse response) {
		try {
			${entitySimpleName} ${entitySimpleName?uncap_first} = new ${entitySimpleName}(Integer.valueOf(request.getParameter("id")));
			${entitySimpleName?uncap_first}Service.delete(${entitySimpleName?uncap_first});
			return success();
		} catch (Throwable e) {
			return fail(e);
		}
	}

}
