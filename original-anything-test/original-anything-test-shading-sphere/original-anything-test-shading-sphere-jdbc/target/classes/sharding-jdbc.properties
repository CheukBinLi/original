spring.shardingsphere.datasource.names=ds1,ds2,ds3,ds4

spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://localhost:3306/mall
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456
spring.shardingsphere.datasource.ds1.connectionInitSqls=SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci

spring.shardingsphere.datasource.ds2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds2.url=jdbc:mysql://localhost:3307/mall
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=123456
spring.shardingsphere.datasource.ds2.connectionInitSqls=SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci

spring.shardingsphere.datasource.ds3.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds3.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds3.url=jdbc:mysql://localhost:3308/mall
spring.shardingsphere.datasource.ds3.username=root
spring.shardingsphere.datasource.ds3.password=123456
spring.shardingsphere.datasource.ds3.connectionInitSqls=SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci

spring.shardingsphere.datasource.ds4.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds4.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds4.url=jdbc:mysql://localhost:3309/mall
spring.shardingsphere.datasource.ds4.username=root
spring.shardingsphere.datasource.ds4.password=123456
spring.shardingsphere.datasource.ds4.connectionInitSqls=SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci

#由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
#spring.shardingsphere.sharding.tables.goods.actual-data-nodes=ds$->{0..1}.goods$->{0..2}
spring.shardingsphere.sharding.tables.goods.actual-data-nodes=master$->{0..1}.goods$->{0..3}
#

#分表
spring.shardingsphere.sharding.tables.goods.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.goods.table-strategy.inline.algorithm-expression=goods$->{id%3}

##用于多分片键的复合分片场景
##分片列名称，多个列以逗号分隔
spring.shardingsphere.sharding.tables.goods.database-strategy.complex.sharding-columns=id
#复合分片算法类名称。该类需实现ComplexKeysShardingAlgorithm接口并提供无参数的构造器
spring.shardingsphere.sharding.tables.goods.database-strategy.complex.algorithm-class-name = com.cheuks.bin.original.anything.test.sharding.sphere.jdbc.strategy.GoodShadingDatabaseStrategy
#spring.shardingsphere.sharding.tables.goods.database-strategy.complex.algorithm-ref = goodShadingDatabaseStrategy
#spring.shardingsphere.sharding.tables.goods.table-strategy.inline.algorithm-expression=goods$->{id % 2}

spring.shardingsphere.sharding.binding-tables[0]= goods
spring.shardingsphere.sharding.binding-tables[1]= goods
spring.shardingsphere.sharding.binding-tables[2]= goods
spring.shardingsphere.sharding.binding-tables[3]= goods

spring.shardingsphere.props.sql.show=true

# 读写分离配置
spring.shardingsphere.sharding.master-slave-rules.master0.master-data-source-name=ds1
spring.shardingsphere.sharding.master-slave-rules.master0.slave-data-source-names=ds3
spring.shardingsphere.sharding.master-slave-rules.master1.master-data-source-name=ds2
spring.shardingsphere.sharding.master-slave-rules.master1.slave-data-source-names=ds4