/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.midea.smart.buy.account.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-03")
public class SmGrantDataRpcService {

  /**
   * *
   * 
   * @Title: smart-buy-account-common
   * @Description:权限服务接口
   * @Company:
   * @Email: chaobin.li@meicloud.com
   * @author cheuk.bin.li
   * @date 2017年8月2日  下午5:12:17
   * 
   */
  public interface Iface {

    /**
     * *
     * @see 根据权限类型查询对应权限数据列表接口
     * 
     * @param tenantId 租户ID
     * @param userId 用户ID
     * @param conditions 附加搜索条件
     * @param grantType 权限类型
     * @param pageNumber 分页页码
     * @param pageSize 分页大小
     * @returnstring json数据
     * 
     * @param tenantId
     * @param userId
     * @param conditions
     * @param grantType
     * @param pageNumber
     * @param pageSize
     */
    public String queryListByGrantType(long tenantId, long userId, Map<String,String> conditions, String grantType, int pageNumber, int pageSize) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryListByGrantType(long tenantId, long userId, Map<String,String> conditions, String grantType, int pageNumber, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String queryListByGrantType(long tenantId, long userId, Map<String,String> conditions, String grantType, int pageNumber, int pageSize) throws org.apache.thrift.TException
    {
      send_queryListByGrantType(tenantId, userId, conditions, grantType, pageNumber, pageSize);
      return recv_queryListByGrantType();
    }

    public void send_queryListByGrantType(long tenantId, long userId, Map<String,String> conditions, String grantType, int pageNumber, int pageSize) throws org.apache.thrift.TException
    {
      queryListByGrantType_args args = new queryListByGrantType_args();
      args.setTenantId(tenantId);
      args.setUserId(userId);
      args.setConditions(conditions);
      args.setGrantType(grantType);
      args.setPageNumber(pageNumber);
      args.setPageSize(pageSize);
      sendBase("queryListByGrantType", args);
    }

    public String recv_queryListByGrantType() throws org.apache.thrift.TException
    {
      queryListByGrantType_result result = new queryListByGrantType_result();
      receiveBase(result, "queryListByGrantType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryListByGrantType failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryListByGrantType(long tenantId, long userId, Map<String,String> conditions, String grantType, int pageNumber, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryListByGrantType_call method_call = new queryListByGrantType_call(tenantId, userId, conditions, grantType, pageNumber, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryListByGrantType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long tenantId;
      private long userId;
      private Map<String,String> conditions;
      private String grantType;
      private int pageNumber;
      private int pageSize;
      public queryListByGrantType_call(long tenantId, long userId, Map<String,String> conditions, String grantType, int pageNumber, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tenantId = tenantId;
        this.userId = userId;
        this.conditions = conditions;
        this.grantType = grantType;
        this.pageNumber = pageNumber;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryListByGrantType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryListByGrantType_args args = new queryListByGrantType_args();
        args.setTenantId(tenantId);
        args.setUserId(userId);
        args.setConditions(conditions);
        args.setGrantType(grantType);
        args.setPageNumber(pageNumber);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryListByGrantType();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryListByGrantType", new queryListByGrantType());
      return processMap;
    }

    public static class queryListByGrantType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryListByGrantType_args> {
      public queryListByGrantType() {
        super("queryListByGrantType");
      }

      public queryListByGrantType_args getEmptyArgsInstance() {
        return new queryListByGrantType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryListByGrantType_result getResult(I iface, queryListByGrantType_args args) throws org.apache.thrift.TException {
        queryListByGrantType_result result = new queryListByGrantType_result();
        result.success = iface.queryListByGrantType(args.tenantId, args.userId, args.conditions, args.grantType, args.pageNumber, args.pageSize);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryListByGrantType", new queryListByGrantType());
      return processMap;
    }

    public static class queryListByGrantType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryListByGrantType_args, String> {
      public queryListByGrantType() {
        super("queryListByGrantType");
      }

      public queryListByGrantType_args getEmptyArgsInstance() {
        return new queryListByGrantType_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryListByGrantType_result result = new queryListByGrantType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryListByGrantType_result result = new queryListByGrantType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryListByGrantType_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryListByGrantType(args.tenantId, args.userId, args.conditions, args.grantType, args.pageNumber, args.pageSize,resultHandler);
      }
    }

  }

  public static class queryListByGrantType_args implements org.apache.thrift.TBase<queryListByGrantType_args, queryListByGrantType_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryListByGrantType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryListByGrantType_args");

    private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CONDITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("conditions", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField GRANT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("grantType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNumber", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryListByGrantType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryListByGrantType_argsTupleSchemeFactory());
    }

    public long tenantId; // required
    public long userId; // required
    public Map<String,String> conditions; // required
    public String grantType; // required
    public int pageNumber; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TENANT_ID((short)1, "tenantId"),
      USER_ID((short)2, "userId"),
      CONDITIONS((short)3, "conditions"),
      GRANT_TYPE((short)4, "grantType"),
      PAGE_NUMBER((short)5, "pageNumber"),
      PAGE_SIZE((short)6, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TENANT_ID
            return TENANT_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // CONDITIONS
            return CONDITIONS;
          case 4: // GRANT_TYPE
            return GRANT_TYPE;
          case 5: // PAGE_NUMBER
            return PAGE_NUMBER;
          case 6: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TENANTID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private static final int __PAGENUMBER_ISSET_ID = 2;
    private static final int __PAGESIZE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CONDITIONS, new org.apache.thrift.meta_data.FieldMetaData("conditions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GRANT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("grantType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("pageNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryListByGrantType_args.class, metaDataMap);
    }

    public queryListByGrantType_args() {
    }

    public queryListByGrantType_args(
      long tenantId,
      long userId,
      Map<String,String> conditions,
      String grantType,
      int pageNumber,
      int pageSize)
    {
      this();
      this.tenantId = tenantId;
      setTenantIdIsSet(true);
      this.userId = userId;
      setUserIdIsSet(true);
      this.conditions = conditions;
      this.grantType = grantType;
      this.pageNumber = pageNumber;
      setPageNumberIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryListByGrantType_args(queryListByGrantType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.tenantId = other.tenantId;
      this.userId = other.userId;
      if (other.isSetConditions()) {
        Map<String,String> __this__conditions = new HashMap<String,String>(other.conditions);
        this.conditions = __this__conditions;
      }
      if (other.isSetGrantType()) {
        this.grantType = other.grantType;
      }
      this.pageNumber = other.pageNumber;
      this.pageSize = other.pageSize;
    }

    public queryListByGrantType_args deepCopy() {
      return new queryListByGrantType_args(this);
    }

    @Override
    public void clear() {
      setTenantIdIsSet(false);
      this.tenantId = 0;
      setUserIdIsSet(false);
      this.userId = 0;
      this.conditions = null;
      this.grantType = null;
      setPageNumberIsSet(false);
      this.pageNumber = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public long getTenantId() {
      return this.tenantId;
    }

    public queryListByGrantType_args setTenantId(long tenantId) {
      this.tenantId = tenantId;
      setTenantIdIsSet(true);
      return this;
    }

    public void unsetTenantId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TENANTID_ISSET_ID);
    }

    /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
    public boolean isSetTenantId() {
      return EncodingUtils.testBit(__isset_bitfield, __TENANTID_ISSET_ID);
    }

    public void setTenantIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TENANTID_ISSET_ID, value);
    }

    public long getUserId() {
      return this.userId;
    }

    public queryListByGrantType_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getConditionsSize() {
      return (this.conditions == null) ? 0 : this.conditions.size();
    }

    public void putToConditions(String key, String val) {
      if (this.conditions == null) {
        this.conditions = new HashMap<String,String>();
      }
      this.conditions.put(key, val);
    }

    public Map<String,String> getConditions() {
      return this.conditions;
    }

    public queryListByGrantType_args setConditions(Map<String,String> conditions) {
      this.conditions = conditions;
      return this;
    }

    public void unsetConditions() {
      this.conditions = null;
    }

    /** Returns true if field conditions is set (has been assigned a value) and false otherwise */
    public boolean isSetConditions() {
      return this.conditions != null;
    }

    public void setConditionsIsSet(boolean value) {
      if (!value) {
        this.conditions = null;
      }
    }

    public String getGrantType() {
      return this.grantType;
    }

    public queryListByGrantType_args setGrantType(String grantType) {
      this.grantType = grantType;
      return this;
    }

    public void unsetGrantType() {
      this.grantType = null;
    }

    /** Returns true if field grantType is set (has been assigned a value) and false otherwise */
    public boolean isSetGrantType() {
      return this.grantType != null;
    }

    public void setGrantTypeIsSet(boolean value) {
      if (!value) {
        this.grantType = null;
      }
    }

    public int getPageNumber() {
      return this.pageNumber;
    }

    public queryListByGrantType_args setPageNumber(int pageNumber) {
      this.pageNumber = pageNumber;
      setPageNumberIsSet(true);
      return this;
    }

    public void unsetPageNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUMBER_ISSET_ID);
    }

    /** Returns true if field pageNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUMBER_ISSET_ID);
    }

    public void setPageNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUMBER_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public queryListByGrantType_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TENANT_ID:
        if (value == null) {
          unsetTenantId();
        } else {
          setTenantId((Long)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case CONDITIONS:
        if (value == null) {
          unsetConditions();
        } else {
          setConditions((Map<String,String>)value);
        }
        break;

      case GRANT_TYPE:
        if (value == null) {
          unsetGrantType();
        } else {
          setGrantType((String)value);
        }
        break;

      case PAGE_NUMBER:
        if (value == null) {
          unsetPageNumber();
        } else {
          setPageNumber((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TENANT_ID:
        return getTenantId();

      case USER_ID:
        return getUserId();

      case CONDITIONS:
        return getConditions();

      case GRANT_TYPE:
        return getGrantType();

      case PAGE_NUMBER:
        return getPageNumber();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TENANT_ID:
        return isSetTenantId();
      case USER_ID:
        return isSetUserId();
      case CONDITIONS:
        return isSetConditions();
      case GRANT_TYPE:
        return isSetGrantType();
      case PAGE_NUMBER:
        return isSetPageNumber();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryListByGrantType_args)
        return this.equals((queryListByGrantType_args)that);
      return false;
    }

    public boolean equals(queryListByGrantType_args that) {
      if (that == null)
        return false;

      boolean this_present_tenantId = true;
      boolean that_present_tenantId = true;
      if (this_present_tenantId || that_present_tenantId) {
        if (!(this_present_tenantId && that_present_tenantId))
          return false;
        if (this.tenantId != that.tenantId)
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_conditions = true && this.isSetConditions();
      boolean that_present_conditions = true && that.isSetConditions();
      if (this_present_conditions || that_present_conditions) {
        if (!(this_present_conditions && that_present_conditions))
          return false;
        if (!this.conditions.equals(that.conditions))
          return false;
      }

      boolean this_present_grantType = true && this.isSetGrantType();
      boolean that_present_grantType = true && that.isSetGrantType();
      if (this_present_grantType || that_present_grantType) {
        if (!(this_present_grantType && that_present_grantType))
          return false;
        if (!this.grantType.equals(that.grantType))
          return false;
      }

      boolean this_present_pageNumber = true;
      boolean that_present_pageNumber = true;
      if (this_present_pageNumber || that_present_pageNumber) {
        if (!(this_present_pageNumber && that_present_pageNumber))
          return false;
        if (this.pageNumber != that.pageNumber)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tenantId = true;
      list.add(present_tenantId);
      if (present_tenantId)
        list.add(tenantId);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_conditions = true && (isSetConditions());
      list.add(present_conditions);
      if (present_conditions)
        list.add(conditions);

      boolean present_grantType = true && (isSetGrantType());
      list.add(present_grantType);
      if (present_grantType)
        list.add(grantType);

      boolean present_pageNumber = true;
      list.add(present_pageNumber);
      if (present_pageNumber)
        list.add(pageNumber);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryListByGrantType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(other.isSetTenantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTenantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, other.tenantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConditions()).compareTo(other.isSetConditions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConditions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditions, other.conditions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGrantType()).compareTo(other.isSetGrantType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGrantType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grantType, other.grantType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNumber()).compareTo(other.isSetPageNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNumber, other.pageNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryListByGrantType_args(");
      boolean first = true;

      sb.append("tenantId:");
      sb.append(this.tenantId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conditions:");
      if (this.conditions == null) {
        sb.append("null");
      } else {
        sb.append(this.conditions);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("grantType:");
      if (this.grantType == null) {
        sb.append("null");
      } else {
        sb.append(this.grantType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNumber:");
      sb.append(this.pageNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryListByGrantType_argsStandardSchemeFactory implements SchemeFactory {
      public queryListByGrantType_argsStandardScheme getScheme() {
        return new queryListByGrantType_argsStandardScheme();
      }
    }

    private static class queryListByGrantType_argsStandardScheme extends StandardScheme<queryListByGrantType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryListByGrantType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TENANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tenantId = iprot.readI64();
                struct.setTenantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONDITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.conditions = new HashMap<String,String>(2*_map0.size);
                  String _key1;
                  String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.conditions.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setConditionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GRANT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.grantType = iprot.readString();
                struct.setGrantTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAGE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNumber = iprot.readI32();
                struct.setPageNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryListByGrantType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
        oprot.writeI64(struct.tenantId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        if (struct.conditions != null) {
          oprot.writeFieldBegin(CONDITIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.conditions.size()));
            for (Map.Entry<String, String> _iter4 : struct.conditions.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.grantType != null) {
          oprot.writeFieldBegin(GRANT_TYPE_FIELD_DESC);
          oprot.writeString(struct.grantType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.pageNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryListByGrantType_argsTupleSchemeFactory implements SchemeFactory {
      public queryListByGrantType_argsTupleScheme getScheme() {
        return new queryListByGrantType_argsTupleScheme();
      }
    }

    private static class queryListByGrantType_argsTupleScheme extends TupleScheme<queryListByGrantType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryListByGrantType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTenantId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetConditions()) {
          optionals.set(2);
        }
        if (struct.isSetGrantType()) {
          optionals.set(3);
        }
        if (struct.isSetPageNumber()) {
          optionals.set(4);
        }
        if (struct.isSetPageSize()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetTenantId()) {
          oprot.writeI64(struct.tenantId);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetConditions()) {
          {
            oprot.writeI32(struct.conditions.size());
            for (Map.Entry<String, String> _iter5 : struct.conditions.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
        if (struct.isSetGrantType()) {
          oprot.writeString(struct.grantType);
        }
        if (struct.isSetPageNumber()) {
          oprot.writeI32(struct.pageNumber);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryListByGrantType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.tenantId = iprot.readI64();
          struct.setTenantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.conditions = new HashMap<String,String>(2*_map6.size);
            String _key7;
            String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.conditions.put(_key7, _val8);
            }
          }
          struct.setConditionsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.grantType = iprot.readString();
          struct.setGrantTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.pageNumber = iprot.readI32();
          struct.setPageNumberIsSet(true);
        }
        if (incoming.get(5)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class queryListByGrantType_result implements org.apache.thrift.TBase<queryListByGrantType_result, queryListByGrantType_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryListByGrantType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryListByGrantType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryListByGrantType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryListByGrantType_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryListByGrantType_result.class, metaDataMap);
    }

    public queryListByGrantType_result() {
    }

    public queryListByGrantType_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryListByGrantType_result(queryListByGrantType_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryListByGrantType_result deepCopy() {
      return new queryListByGrantType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryListByGrantType_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryListByGrantType_result)
        return this.equals((queryListByGrantType_result)that);
      return false;
    }

    public boolean equals(queryListByGrantType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryListByGrantType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryListByGrantType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryListByGrantType_resultStandardSchemeFactory implements SchemeFactory {
      public queryListByGrantType_resultStandardScheme getScheme() {
        return new queryListByGrantType_resultStandardScheme();
      }
    }

    private static class queryListByGrantType_resultStandardScheme extends StandardScheme<queryListByGrantType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryListByGrantType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryListByGrantType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryListByGrantType_resultTupleSchemeFactory implements SchemeFactory {
      public queryListByGrantType_resultTupleScheme getScheme() {
        return new queryListByGrantType_resultTupleScheme();
      }
    }

    private static class queryListByGrantType_resultTupleScheme extends TupleScheme<queryListByGrantType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryListByGrantType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryListByGrantType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
